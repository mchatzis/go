// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
)

const countTasksInState = `-- name: CountTasksInState :one
SELECT COUNT(*) FROM tasks WHERE state = $1
`

func (q *Queries) CountTasksInState(ctx context.Context, state TaskState) (int64, error) {
	row := q.db.QueryRow(ctx, countTasksInState, state)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, type, value, state, creationtime, lastupdatetime) VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateTaskParams struct {
	ID             int32
	Type           int32
	Value          int32
	State          TaskState
	Creationtime   float64
	Lastupdatetime float64
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.Exec(ctx, createTask,
		arg.ID,
		arg.Type,
		arg.Value,
		arg.State,
		arg.Creationtime,
		arg.Lastupdatetime,
	)
	return err
}

const getCountDoneTasksByType = `-- name: GetCountDoneTasksByType :many
SELECT type, COUNT(*) FROM tasks WHERE state='done' GROUP BY type ORDER BY type
`

type GetCountDoneTasksByTypeRow struct {
	Type  int32
	Count int64
}

func (q *Queries) GetCountDoneTasksByType(ctx context.Context) ([]GetCountDoneTasksByTypeRow, error) {
	rows, err := q.db.Query(ctx, getCountDoneTasksByType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCountDoneTasksByTypeRow
	for rows.Next() {
		var i GetCountDoneTasksByTypeRow
		if err := rows.Scan(&i.Type, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountTasksByState = `-- name: GetCountTasksByState :many
SELECT state, COUNT(*) FROM tasks GROUP BY state
`

type GetCountTasksByStateRow struct {
	State TaskState
	Count int64
}

func (q *Queries) GetCountTasksByState(ctx context.Context) ([]GetCountTasksByStateRow, error) {
	rows, err := q.db.Query(ctx, getCountTasksByState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCountTasksByStateRow
	for rows.Next() {
		var i GetCountTasksByStateRow
		if err := rows.Scan(&i.State, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalValueDoneTasksByType = `-- name: GetTotalValueDoneTasksByType :many
SELECT type, SUM(value) FROM tasks WHERE state='done' GROUP BY type ORDER BY type
`

type GetTotalValueDoneTasksByTypeRow struct {
	Type int32
	Sum  int64
}

func (q *Queries) GetTotalValueDoneTasksByType(ctx context.Context) ([]GetTotalValueDoneTasksByTypeRow, error) {
	rows, err := q.db.Query(ctx, getTotalValueDoneTasksByType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalValueDoneTasksByTypeRow
	for rows.Next() {
		var i GetTotalValueDoneTasksByTypeRow
		if err := rows.Scan(&i.Type, &i.Sum); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks SET state = $1 WHERE id = $2
`

type UpdateTaskStateParams struct {
	State TaskState
	ID    int32
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) error {
	_, err := q.db.Exec(ctx, updateTaskState, arg.State, arg.ID)
	return err
}
