services:
  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 1s
      timeout: 1s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./producer/pkg/sqlc/init-db:/docker-entrypoint-initdb.d
    networks:
      - app-network

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network

  producer:
    container_name: producer
    build:
      context: ./producer
      dockerfile: ./build/Dockerfile
      args:
        BUILD_VERSION: v1.0.0
    env_file:
      - .env
    expose:
      - "50051"
    ports:
      - "6060:6060"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    # develop:
    #   watch:
    #     - action: rebuild
    #       path: ./producer
    command: ./main --loglevel ${LOG_LEVEL} --max_backlog ${MAX_BACKLOG}

  consumer:
    container_name: consumer
    build:
      context: ./consumer
      dockerfile: ./build/Dockerfile
      args:
        BUILD_VERSION: v1.0.0
    env_file:
      - .env
    expose:
      - "50051"
    ports:
      - "6061:6061"
    depends_on:
      - postgres
    networks:
      - app-network
    # develop:
    #   watch:
    #     - action: rebuild
    #       path: ./consumer
    command: ./main --loglevel ${LOG_LEVEL} --rate_limit_multiplier ${RATE_LIMIT_MULTIPLIER}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=error'
    expose:
      - "9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - .env
    environment:
      - GF_LOG_LEVEL=error
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:

